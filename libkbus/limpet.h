/*
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the KBUS Lightweight Linux-kernel mediated
 * message system
 *
 * The Initial Developer of the Original Code is Kynesim, Cambridge UK.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Kynesim, Cambridge UK
 *   Tony Ibbs <tibs@tonyibbs.co.uk>
 *
 * Alternatively, the contents of this file may be used under the terms of the
 * GNU Public License version 2 (the "GPL"), in which case the provisions of
 * the GPL are applicable instead of the above.  If you wish to allow the use
 * of your version of this file only under the terms of the GPL and not to
 * allow others to use your version of this file under the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL.  If you do not delete the
 * provisions above, a recipient may use your version of this file under either
 * the MPL or the GPL. 
 *
 * ***** END LICENSE BLOCK *****
 */

#ifndef _LIMPET_H_INCLUDED_
#define _LIMPET_H_INCLUDED_

#ifdef __cplusplus
extern "C" {
#endif 

// NOTE that the middle portion of this file is autogenerated from limpet.c
// so that the function header comments and function prototypes may be
// automatically kept in-step. This allows me to treat the C file as the main
// specification of the functions it defines, and also to keep C header
// comments in the C file, which I find easier when keeping the comments
// correct as the code is edited.
//
// The Python script extract_hdrs.py is used to perform this autogeneration.
// It should transfer any C function marked as 'extern' and with a header
// comment (of the '/*...*...*/' form).

// -------- TEXT AFTER THIS AUTOGENERATED - DO NOT EDIT --------
// Autogenerated by extract_hdrs.py on 2010-02-25 (Thu 25 Feb 2010) at 13:52
/*
 * Run a KBUS Limpet.
 *
 * A Limpet proxies KBUS messages to/from another Limpet.
 *
 * `ksock` is the Ksock to use to communicate with KBUS. It must have been
 * opened for read and write.
 *
 * `limpet_socket` is the socket to use to communicate with the other Limpet of
 * this pair.
 *
 * `network_id` is a positive, non-negative integer identifying this Limpet.
 * All Limpets that can rech each other (i.e., by passing messages via other
 * Limpets and other KBUS devives) must have distinct network ids. This Limpet
 * will check that it has a different network id than its pair.
 *
 * `message_name` is what this Limpet will "listen" to -- all messages matching
 * this will be forwarded to the other Limpet. If it is NULL, then "$.*" will
 * be used. Note that the Limpet will also listen for Replier Bind Events (and
 * act on them).
 *
 * If `termination_message` is non-NULL, then this Limpet will exit when it read
 * a message with that name from KBUS.
 *
 * `verbosity` determines how much information a Limpet will write to standard
 * output. 0 means to be quiet, 1 means a moderate amount of output, 2 will
 * produce messages giving details of exactly how messages are being received,
 * sent and manipulated.
 *
 * This function is not normally expected to return, but given that, it returns
 * 0 if `termination_message` was given, and the Limpet received such a
 * message, or -1 if it went wrong.
 */
extern int kbus_limpet(kbus_ksock_t     ksock,
                       int              limpet_socket,
                       uint32_t         network_id,
                       char            *message_name,
                       char            *termination_message,
                       int              verbosity);

// -------- TEXT BEFORE THIS AUTOGENERATED - DO NOT EDIT --------

#ifdef __cplusplus
}
#endif 

#endif /* _LIMPET_H_INCLUDED_ */

// Local Variables:
// tab-width: 8
// indent-tabs-mode: nil
// c-basic-offset: 2
// End:
// vim: set tabstop=8 shiftwidth=2 softtabstop=2 expandtab:
