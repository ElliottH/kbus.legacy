Changes for the great reorganisation
====================================

In kbus_defns:

* Changed start_guard and end_guard - they now correspond to "Kbus" and
  "subK", instead of "kbus" and "subk". Which seems a reasonable change.

* New datastructure kbus_ksock_id. This is the same shape as kbus_msg_id, but
  kept separate because it really *is* a new type of data.

.. note:: The network_id part of a kbus_ksock_id may only be non-zero in two
   cases:

   1. It is the 'from' field in a Reply, and that Reply has come via a Limpet,
      from another network.

      PROBABLY: enforce this: only a Reply may have a network_id in its 'from'

   2. It is the 'to' field in a (stateful) request, in which case it is a copy
      of a 'from' field from a previous Reply, which came from another
      network.

      PROBABLY: enforce this: only a Request may have a network_id in its 'to'

   This all means that (almost all of the time) KBUS itself, internally, need
   only worry about the "local" element of the kbus_ksock_id, and thus can
   continue to pass around just a uint32_t value.

   It also means that any synthetic message (generated internally by KBUS)
   will be local, and need not worry about the network id. I think.

Proposed:

In the Python code, KSock should become Ksock, which is (a) easier to type (!)
and (b) follows PEP 8 more closely.

In Python messages.py:

* Changed START_GUARD and END_GUARD - they now correspond to "Kbus" and
  "subK", instead of "kbus" and "subk". Which matches the C.

Don't forget to look at the C library as well...

(JavaScript and C++ bindings, elsewhere, will also need changing at some
point.)

